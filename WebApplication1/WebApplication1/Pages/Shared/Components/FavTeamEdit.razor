@page "/FavTeamEdit"
@using Newtonsoft.Json;
@using Components;
@using WebApplication1.Model;
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@*@inject SignInManager<ApplicationUser> SignInManager*@
@inject UserManager<ApplicationUser> userManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime



<br />
<div style="margin-top:20px" class="toast justify-content-center align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
  <div class="d-flex">
    <div class="toast-body">
      Favourite Team Updated Successfully!
    </div>
    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
  </div>
</div>
<br />
<h3>Current Favourite Team: @FavTeam </h3>
<ul class="nav nav-tabs" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" data-bs-toggle="tab" href="#soccer">Soccer</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" data-bs-toggle="tab" href="#basketBall">BasketBall</a>
    </li>

    @*<div class="navbar-nav justify-content-center">

            <div class="position-relative">
                <input type="text" class="form-control" placeholder="Search Live" @bind="@SearchValue" @oninput="Search">
                <i class="fa-solid fa-magnifying-glass position-absolute top-50 end-0 translate-middle-y pe-2"></i>
            </div>

        </div>*@

</ul>


<div class="tab-content">

    @if (isLoading)
    {
        <Loading />
    }
    else
    {
        <div id="soccer" class="container tab-pane active">
            <br>
            
            <div class="container-fluid">
                <div class="showtoast row">
                    @foreach (var index in soccer)
                    {
                        if (index.name != null && index.logo != "")
                        {
                            <a  id="@index.id" class=" d-flex col-md-4 col-lg-3 justify-content-center align-content-center" @onclick="() => { addFavTeam(index.id); }">
                                <figure  class="favimgdiv rounded-circle flex-column justify-content-center align-content-center"style="text-align: center">
                                    <img  src=@index.logo class="favimg" >
                                    <figcaption>@index.name</figcaption>
                                </figure>
                            </a>
                        }
                    }
                </div>
            </div>
        </div>

        <div id="basketBall" class="container tab-pane fade">
            <br>
            <div class="container-fluid">
                <div class="row">
                    @foreach (var index in basketball)
                    {
                        if (index.name != null && index.logo != "")
                        {
                            <a  id="@index.id" class=" d-flex col-md-4 col-lg-3 justify-content-center align-content-center" @onclick="() => { addFavTeam(index.id); }">
                                <figure class="favimgdiv rounded-circle flex-column justify-content-center align-content-center"style="text-align: center">
                                    <img src=@index.logo class="favimg" >
                                    <figcaption>@index.name</figcaption>
                                </figure>
                            </a>
                        }
                    }
                </div>
            </div>
        </div>

    }
</div>


@code {

    public dynamic res = null;
    public dynamic AllGames = new List<dynamic>();
    public dynamic soccer = new List<dynamic>();
    public dynamic basketball = new List<dynamic>();

    public dynamic searchList = new List<dynamic>();
    private bool loading = true;

    private string FavTeam = "";

    public bool isLoading = true;

    public bool isUpdatedTeam = false;

    [Parameter]
    public string id { get; set; }

    public async void addFavTeam(dynamic id)
    {
        isLoading = true;
        var user = await userManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        user.FavTeam = id.ToString();
        await userManager.UpdateAsync(user);

        FavTeam = id.ToString();
        isLoading = false;
        await InvokeAsync(StateHasChanged);
        
        await JSRuntime.InvokeVoidAsync("showtoast");

    }


    protected override async Task OnInitializedAsync(){
        var client = new HttpClient();

        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Get,
            RequestUri = new Uri("https://sportscore1.p.rapidapi.com/sports/1/teams?page=1"),
            Headers =
{
                            { "X-RapidAPI-Host", "sportscore1.p.rapidapi.com" },
                            { "X-RapidAPI-Key", Global.API_KEY },
                        },
        };
        using (var response = await client.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadAsStringAsync();


            res = JsonConvert.DeserializeObject(body);


            foreach (var item in res.data)
                soccer.Add(item);


        }

        //israel league
        request = new HttpRequestMessage
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri("https://sportscore1.p.rapidapi.com/teams/search?section_id=183"),
            Headers =
{
                            { "X-RapidAPI-Host", "sportscore1.p.rapidapi.com" },
                            { "X-RapidAPI-Key", Global.API_KEY },
                        },
        };
        using (var response = await client.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadAsStringAsync();


            res = JsonConvert.DeserializeObject(body);


            foreach (var item in res.data)
                if (item.is_nationality != "true")
                    basketball.Add(item);
        }
        //nba
        request = new HttpRequestMessage
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri("https://sportscore1.p.rapidapi.com/teams/search?section_id=168"),
            Headers =
{
                            { "X-RapidAPI-Host", "sportscore1.p.rapidapi.com" },
                            { "X-RapidAPI-Key", Global.API_KEY },
                        },
        };
        using (var response = await client.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadAsStringAsync();


            res = JsonConvert.DeserializeObject(body);


            foreach (var item in res.data)
                if (item.is_nationality != "true")
                    basketball.Add(item);
        }
        //euroleague
        request = new HttpRequestMessage
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri("https://sportscore1.p.rapidapi.com/teams/search?section_id=182"),
            Headers =
{
                            { "X-RapidAPI-Host", "sportscore1.p.rapidapi.com" },
                            { "X-RapidAPI-Key", Global.API_KEY },
                        },
        };
        using (var response = await client.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadAsStringAsync();


            res = JsonConvert.DeserializeObject(body);


            foreach (var item in res.data)
                if (item.is_nationality != "true")
                    basketball.Add(item);
        }
        isLoading = false;
        var user = await userManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        FavTeam = user.FavTeam;
    }

    // nba = 7422,168 euro = 7473,182 israel = 7553,183      18794


    
}
